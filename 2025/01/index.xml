<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01 on Doug&#39;s Place</title>
    <link>http://localhost:1313/2025/01.html</link>
    <description>Recent content in 01 on Doug&#39;s Place</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015-2025 Douglas Cuthbertson (except where indicated otherwise). The content of this work is licensed under the [Creative Commons Attribution 4.0 (CC BY 4.0), International License](https://creativecommons.org/licenses/by/4.0/), again except where indicated otherwise</copyright>
    <lastBuildDate>Thu, 30 Jan 2025 20:40:29 -0500</lastBuildDate>
    
        <atom:link href="http://localhost:1313/2025/01/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unit Test</title>
      <link>http://localhost:1313/2025/01/unit-test.html</link>
      <pubDate>Thu, 30 Jan 2025 20:40:29 -0500</pubDate>
      
      <guid>http://localhost:1313/2025/01/unit-test.html</guid>
      <description>&lt;p&gt;I want to get back into C programming on a regular basis, but one of the problems with writing C code is making sure it does what you intend it to do. I&amp;rsquo;ve made lots of mistakes in the past, and I&amp;rsquo;d like to reduce their likelihood a little. One way is to test the hell out of code. There are lots of test frameworks out there, like &lt;a href=&#34;https://libcheck.github.io/check/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Check&lt;/a&gt;, &lt;a href=&#34;https://cunit.sourceforge.net/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CUnit&lt;/a&gt;, &lt;a href=&#34;https://cutest.sourceforge.net/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CuTest&lt;/a&gt;, and a great many others. Some of them look great, but I think that the experience of writing my own will be a gentle way to get back into a regular habit of writing C.&lt;/p&gt;
&lt;p&gt;&lt;aside class=&#34;toc&#34;&gt;
  &lt;h2 class=&#34;toc-title&#34;&gt;Contents&lt;/h2&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#goals&#34;&gt;Goals&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;

While writing this note I found &lt;a href=&#34;https://cmocka.org/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cmocka&lt;/a&gt;. It has a great looking website making me think it must be very polished, so what am I doing writing my own unit test framework? For the experience, to try my own ideas of what unit tests and the testing experience should look and feel like. I hope it will be fun.&lt;/p&gt;
&lt;h2 id=&#34;goals&#34;&gt;Goals&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ll start simply. In fact, what&amp;rsquo;s the simplest unit test framework that can get the job done? Such a project needs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A test driver. A program to load and run a set of tests.&lt;/li&gt;
&lt;li&gt;Something that contains a set of tests, like a dynamically loadable library (DLL), aka, a shared library.&lt;/li&gt;
&lt;li&gt;Some standard way to write tests such that the test driver can setup, run, and teardown each test.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my mind, a DLL (or .so file) should encapsulate a suite of test cases. The test driver can be a static library that provides all of the functions needed to load and run tests, and collect results that can be reported in some manner (e.g., written to a terminal or a file).&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/testing-cabal/subunit&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Subunit&lt;/a&gt; is a streaming protocol for test results.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://xunit.net/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xUnit.net&lt;/a&gt; is a free, open source, community-focused unit testing tool for the .NET Framework.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.martinfowler.com/bliki/Xunit.html&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xUnit&lt;/a&gt; article by Martin Fowler.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/testmoapp/junitxml&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Common JUnit XML Format &amp;amp; Examples&lt;/a&gt;. Apparently, the JUnit XML file format (first introduced by the Ant build tool and made popular by the JUnit project) has become the de facto standard format to exchange test results between tools (at least in the Java world).&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
