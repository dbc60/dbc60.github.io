<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swdev on Doug&#39;s Place</title>
    <link>http://localhost:1313/tags/swdev.html</link>
    <description>Recent content in Swdev on Doug&#39;s Place</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015-2025 Douglas Cuthbertson (except where indicated otherwise). The content of this work is licensed under the [Creative Commons Attribution 4.0 (CC BY 4.0), International License](https://creativecommons.org/licenses/by/4.0/), again except where indicated otherwise</copyright>
    <lastBuildDate>Sun, 14 Jan 2024 07:38:28 -0500</lastBuildDate>
    
        <atom:link href="http://localhost:1313/tags/swdev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Deep Look at a Memory Allocator</title>
      <link>http://localhost:1313/garden/mem-allocator/a-deep-look-at-a-memory-allocator.html</link>
      <pubDate>Sun, 14 Jan 2024 07:38:28 -0500</pubDate>
      
      <guid>http://localhost:1313/garden/mem-allocator/a-deep-look-at-a-memory-allocator.html</guid>
      <description>&lt;p&gt;Doug Lea&amp;rsquo;s allocator, often referred to as &lt;a href=&#34;https://gee.cs.oswego.edu/dl/html/malloc.html&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dlmalloc&lt;/a&gt;, provides implementations of the standard C memory functions &lt;code&gt;malloc()&lt;/code&gt;, &lt;code&gt;free()&lt;/code&gt;, &lt;code&gt;realloc()&lt;/code&gt;, and friends. I need a memory allocator for a personal project and Lea generously put his code in the public domain, so I thought to adapt it to my needs. Note that the latest release in 2023 relicensed it under the &lt;a href=&#34;https://opensource.org/license/mit-0/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;MIT No Attribution&amp;rdquo; (MIT-0) License&lt;/a&gt;, which is supposed to be more palatable than the public domain.&lt;/p&gt;
&lt;aside class=&#34;toc&#34;&gt;
  &lt;h2 class=&#34;toc-title&#34;&gt;Contents&lt;/h2&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#1-overview&#34;&gt;1 Overview&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#2-current-behavior&#34;&gt;2 Current Behavior&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#3-algorithms&#34;&gt;3 Algorithms&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#4-data-structures&#34;&gt;4 Data Structures&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#5-api-documentation&#34;&gt;5 API Documentation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#6-usage-examples&#34;&gt;6 Usage Examples&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#7-configuration-options&#34;&gt;7 Configuration Options&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#8-performance-characteristics&#34;&gt;8 Performance Characteristics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#9-concurrency-considerations&#34;&gt;9 Concurrency Considerations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#10-troubleshooting-and-debugging&#34;&gt;10 Troubleshooting and Debugging&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#11-references&#34;&gt;11 References&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#12-changelog&#34;&gt;12 Changelog&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#13-contributing-guidelines&#34;&gt;13 Contributing Guidelines&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#14-license-information&#34;&gt;14 License Information&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#15-feedback-mechanism&#34;&gt;15 Feedback Mechanism&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#16-documentation-format&#34;&gt;16 Documentation Format&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;

&lt;p&gt;The source code, &lt;a href=&#34;https://gee.cs.oswego.edu/pub/misc/malloc.c&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in a single source file, malloc.c&lt;/a&gt; and an &lt;a href=&#34;https://gee.cs.oswego.edu/pub/misc/malloc.h&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;optional header, malloc.h&lt;/a&gt;, is a little difficult (for me) to grok all at once. My goals here are to understand:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how it works.&lt;/li&gt;
&lt;li&gt;its configuration options.&lt;/li&gt;
&lt;li&gt;if and when the code is thread-safe.&lt;/li&gt;
&lt;li&gt;how to build it for Windows, Linux, and possibly other operating systems.&lt;/li&gt;
&lt;li&gt;the key algorithms employed.&lt;/li&gt;
&lt;li&gt;its internal data structures.&lt;/li&gt;
&lt;li&gt;how to use it as a replacement for the C runtime implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m not a fan of AI for software development, but I needed a quick outline of how to do this, so I asked ChatGPT to see what it would come up with. It surprised me with a concise outline, so I&amp;rsquo;ve adapted its reply into the following outline. It&amp;rsquo;s probably too detailed, but it will do for a starting point. I can adjust it as needed.&lt;/p&gt;
&lt;h2 id=&#34;1-overview&#34;&gt;1 Overview&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Start with a high-level overview of &lt;code&gt;dlmalloc&lt;/code&gt;, explaining its purpose and role as a memory allocator.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Provide information on the primary goals of &lt;code&gt;dlmalloc&lt;/code&gt;, such as efficiency, scalability, or low fragmentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-current-behavior&#34;&gt;2 Current Behavior&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Detail the current behavior of &lt;code&gt;dlmalloc&lt;/code&gt;, focusing on how it handles memory allocation, deallocation, and management.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Describe any unique features or characteristics that distinguish &lt;code&gt;dlmalloc&lt;/code&gt; from other allocators.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-algorithms&#34;&gt;3 Algorithms&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Document the key algorithms employed by &lt;code&gt;dlmalloc&lt;/code&gt;, including but not limited to:&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Memory Allocation Algorithm: Explain how &lt;code&gt;dlmalloc&lt;/code&gt; searches for and allocates memory blocks.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Memory Deallocation Algorithm: Describe how &lt;code&gt;dlmalloc&lt;/code&gt; frees memory and manages freed blocks.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Internal Data Structures: Highlight the data structures used for efficient bookkeeping.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Concurrency Control (if any): Detail how &lt;code&gt;dlmalloc&lt;/code&gt; handles multiple threads if it&amp;rsquo;s designed to be thread-safe.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-data-structures&#34;&gt;4 Data Structures&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Provide detailed information about the primary data structures used by &lt;code&gt;dlmalloc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Include diagrams or visual representations to aid understanding.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Explain the purpose and relationships between different data structures.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-api-documentation&#34;&gt;5 API Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Document the public API of &lt;code&gt;dlmalloc&lt;/code&gt;, including function signatures, parameters, and return values.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Clarify any assumptions or requirements for using the API effectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-usage-examples&#34;&gt;6 Usage Examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Include practical usage examples to illustrate how developers can use &lt;code&gt;dlmalloc&lt;/code&gt; in their code.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Cover common scenarios and provide code snippets.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-configuration-options&#34;&gt;7 Configuration Options&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Document any compile-time or runtime configuration options available in &lt;code&gt;dlmalloc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Explain how these options affect the behavior of the allocator.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-performance-characteristics&#34;&gt;8 Performance Characteristics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Discuss the expected performance characteristics of &lt;code&gt;dlmalloc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Include information on scalability, throughput, and any trade-offs made for performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;9-concurrency-considerations&#34;&gt;9 Concurrency Considerations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; If applicable, document how &lt;code&gt;dlmalloc&lt;/code&gt; handles concurrency and thread safety.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Describe any synchronization mechanisms in place.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10-troubleshooting-and-debugging&#34;&gt;10 Troubleshooting and Debugging&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Include information on common issues users might encounter and how to troubleshoot them.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Provide guidance on debugging techniques for memory-related problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;11-references&#34;&gt;11 References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Include references to relevant academic papers, articles, or other external sources that influenced the design or implementation of &lt;code&gt;dlmalloc&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-changelog&#34;&gt;12 Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; If available, provide a changelog documenting major changes, bug fixes, and enhancements across different versions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13-contributing-guidelines&#34;&gt;13 Contributing Guidelines&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Encourage contributions by including guidelines on how users can contribute to the development or improvement of &lt;code&gt;dlmalloc&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;14-license-information&#34;&gt;14 License Information&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Clearly state the licensing terms under which &lt;code&gt;dlmalloc&lt;/code&gt; is distributed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;15-feedback-mechanism&#34;&gt;15 Feedback Mechanism&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Provide a way for users to offer feedback or report issues, such as a link to the issue tracker or mailing list.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;16-documentation-format&#34;&gt;16 Documentation Format&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Choose a consistent format for documentation, such as Markdown, and ensure that it is easily accessible.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Software-Development Workshop</title>
      <link>http://localhost:1313/2023/11/software-development-workshop.html</link>
      <pubDate>Sat, 18 Nov 2023 12:04:32 +0000</pubDate>
      
      <guid>http://localhost:1313/2023/11/software-development-workshop.html</guid>
      <description>&lt;p&gt;I have recently started to consider an analogy between the process of software development and a workshop as a place where a craftsperson builds stuff. A workshop for writing software is a place where a programmer can find the various tools and resources needed for creating computer programs. The programmer can select tools from the workshop to build their own development environment, or to continue the analogy, set up their workbench for the tasks at hand.&lt;/p&gt;
&lt;p&gt;My main goal is to organize my tools and be clear about what I need and use to write software, explore the process of software development, and figure out why some tools work well and others don&amp;rsquo;t. I also want to hone my skills in a few programming languages, try out various development techniques and methodologies, and just see what works. If I find a larger project along the way and create something useful, all the better.&lt;/p&gt;
&lt;p&gt;When I write code, it&amp;rsquo;s primarily on the Windows operating system. I&amp;rsquo;ve dabbled in Linux and FreeBSD, and I even have a MacBook Pro for work. I need to get used to it. It&amp;rsquo;s a very foreign environment. So, I hope to take the time to learn more about them along the way.&lt;/p&gt;
&lt;p&gt;The programming languages I have the most experience with are C, C++, and &lt;a href=&#34;https://go.dev&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go&lt;/a&gt; (aka, golang). I mostly use Visual Studio Code for editing. For building code written in Go, except for the editor, there&amp;rsquo;s just one set of tools. When it comes to C/C++ programs I use the Community Editions of Visual Studio.&lt;/p&gt;
&lt;p&gt;That covers only Windows programs. I want to have more experience with writing code for Linux, MacOS, and the various BSD operating systems. I have been interested in &lt;a href=&#34;https://clang.llvm.org/get_started.html&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;clang&lt;/a&gt; for a while, so I built it from source. The tools needed for that were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cmake.org/download/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/vs/community/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Visual Studio 17 2022 Community Edition&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitforwindows.org/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git for Windows&lt;/a&gt; to checkout the &lt;a href=&#34;https://github.com/llvm/llvm-project.git&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;llvm repository&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just building clang was quite an experience. Once CMake created the VS solution and project files, it took a little over 20 minutes for Visual Studio 2022 CE to build llvm, clang, clang++, and the rest of the toolset. I&amp;rsquo;m glad I built a rather beefy home computer last year, because this build took a lot of computing power. I think it&amp;rsquo;s the first time I&amp;rsquo;ve seen all 32 threads pegged at 100% and memory usage climb so high (72 GB at one point).&lt;/p&gt;
&lt;figure class=&#34;post-image&#34; &gt;&lt;a href=&#34;http://localhost:1313/images/building-clang.png&#34;&gt;
    &lt;img src=&#34;http://localhost:1313/images/building-clang.png&#34;
         alt=&#34;Building LLVM and Clang on Windows&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;
            Building LLVM and Clang on Windows Poof!
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I&amp;rsquo;ve had bad experiences with both Python and CMake on Windows, but after building clang my opinion of both of them has improved. I&amp;rsquo;ll be more open to Python programming down the road. On the other hand, while I might explore CMake it&amp;rsquo;s probably more complex than what I need for most of my software projects. Most often, I find that simple build scripts do the job.&lt;/p&gt;
&lt;p&gt;Another goal I have for my &amp;ldquo;workshop&amp;rdquo; is to hone my skills in C, C++, and Go. I may eventually try some others, like &lt;a href=&#34;https://www.rust-lang.org/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rust&lt;/a&gt; and &lt;a href=&#34;https://ocaml.org/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OCaml&lt;/a&gt;. Of course, JavaScript is so pervasive that I&amp;rsquo;ll have to see what I can do with it. I used an old version of &lt;a href=&#34;https://nodejs.org/en/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js&lt;/a&gt; at work a long time ago. It was used with great success for many years to develop agents for an intrusion-detection system running on Linux. We eventually ported it to Golang where the code was far easier to maintain.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve written a lot of Windows batch scripts (&lt;code&gt;bat&lt;/code&gt; or &lt;code&gt;cmd&lt;/code&gt; files) and some bash scripts (mostly while running git bash). I&amp;rsquo;d like to be better at writing PowerShell (it&amp;rsquo;s so much more powerful than the Windows command terminal), bash scripts, and to explore the &lt;a href=&#34;https://www.tcl.tk/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tcl/Tk&lt;/a&gt; scripting language.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Glob Patterns</title>
      <link>http://localhost:1313/2023/05/glob-patterns.html</link>
      <pubDate>Mon, 08 May 2023 17:01:29 -0400</pubDate>
      
      <guid>http://localhost:1313/2023/05/glob-patterns.html</guid>
      <description>&lt;p&gt;Some time in 2016 or 2017, I needed a way to match file paths with &lt;a href=&#34;https://en.wikipedia.org/wiki/Glob_%28programming%29&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;glob patterns&lt;/a&gt;. The trick was that it had to work in a filter driver running in the Windows kernel. There weren&amp;rsquo;t a lot of ready-to-use libraries that were kernel-ready. In fact I couldn&amp;rsquo;t find any, so I wrote my own.&lt;/p&gt;
&lt;p&gt;Back then, I wrote an implementation in C which was very Windows-centric, and didn&amp;rsquo;t hold to the syntactic rules from the &lt;a href=&#34;https://man7.org/linux/man-pages/man7/glob.7.html&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;glob(7) man page&lt;/a&gt;. It was sufficient for the job, but I wanted to revisit the problem and create something more generally useful. I uploaded &lt;a href=&#34;https://github.com/dbc60/glob&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;an implementation in Go on GitHub&lt;/a&gt; that holds to the &lt;a href=&#34;https://man7.org/linux/man-pages/man7/glob.7.html&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;glob(7)&lt;/a&gt; rules, is very efficient, and runs in user space on both Windows and Linux.&lt;/p&gt;
&lt;p&gt;This Go module accepts the &lt;code&gt;**&lt;/code&gt; wildcard (to match directory paths recursively) as well as &lt;a href=&#34;https://man7.org/linux/man-pages/man7/glob.7.html&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;normal wildcards&lt;/a&gt;. When I originally researched how to go about building a pattern-matching function, I looked for existing code to get an idea of how to structure a solution. I hoped that I could find an open-source library where I could just transliterate the code from whatever language it was written to C (without any calls to the standard library, because that&amp;rsquo;s not a thing within the Windows kernel). All the examples I could find were either limited to the standard wildcards or had exponential behavior, as &lt;a href=&#34;https://research.swtch.com/glob&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Russ Cox so eloquently discussed&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That got me thinking about the shape of glob patterns. Simple patterns, made up of literal strings, the &lt;code&gt;?&lt;/code&gt; wildcard, and character classes, are matched character-by-character (with a little extra processing for character classes). The &lt;code&gt;*&lt;/code&gt; pattern matches zero-or-more characters followed by whatever simple pattern follows it. So &lt;code&gt;abc*xyz&lt;/code&gt; is a glob composed of a simple pattern, &lt;code&gt;abc&lt;/code&gt;, followed by a zero-or-more pattern &lt;code&gt;*xyz&lt;/code&gt;. The latter pattern is called a &lt;em&gt;directory pattern&lt;/em&gt;, because it&amp;rsquo;s limited to matching file and directory names within a single directory. Directory patterns amount to specifying a loop that consumes a character (except a path separator) every time the simple pattern that follows it fails to match some portion of a path.&lt;/p&gt;
&lt;p&gt;Similarly, &lt;code&gt;**&lt;/code&gt; patterns, &lt;em&gt;recursive patterns&lt;/em&gt;, can be thought of requiring a loop that consumes any character that isn&amp;rsquo;t matched by whatever pattern follows it. The trick here is to realize that &lt;code&gt;**&lt;/code&gt; can be followed by a simple pattern and zero-or-more directory patterns. If at any point during the matching process the simple pattern or any of the directory patterns that may follow it fail, then processing continues by allowing &lt;code&gt;**&lt;/code&gt; to consume one character from the path and then matching the path to the pattern restarts from that point. This is still an $O(n)$ process, because each iteration makes progress through the path until either the whole pattern and path are consumed, or a match cannot be found.&lt;/p&gt;
&lt;p&gt;This realization, that recursive patterns are made up of simple and directory patterns, led to a relatively simple algorithm and a fast implementation. See the &lt;a href=&#34;https://github.com/dbc60/glob&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repo&lt;/a&gt; for the code.&lt;/p&gt;
&lt;p&gt;Updated 2023-11-12: spelling, grammar and to clarify how recursive patterns are processed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Testing With Permutations</title>
      <link>http://localhost:1313/2023/05/testing-with-permutations.html</link>
      <pubDate>Tue, 02 May 2023 10:43:42 -0400</pubDate>
      
      <guid>http://localhost:1313/2023/05/testing-with-permutations.html</guid>
      <description>&lt;p&gt;How do I test a library that matches glob patterns to file paths? Glob patterns consist of literal characters, a few wildcards, &amp;lsquo;&lt;code&gt;?&lt;/code&gt;&amp;rsquo;, &amp;lsquo;&lt;code&gt;[&lt;/code&gt;&amp;rsquo;, and &amp;lsquo;&lt;code&gt;*&lt;/code&gt;&amp;rsquo;, the last of which can be doubled to match paths recursively, and each of which can be escaped to match the literal character. So we have eight kinds of patterns to test: literals, four kinds of wildcards, and three escaped wildcards, which means there are $8! = 40,320$ possible permutations. Fortunately, we don&amp;rsquo;t have to test all of those possibilities to ensure reasonable code coverage.&lt;/p&gt;
&lt;aside class=&#34;toc&#34;&gt;
  &lt;h2 class=&#34;toc-title&#34;&gt;Contents&lt;/h2&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#different-types-of-glob-patterns&#34;&gt;Different Types of Glob Patterns&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-easy-patterns&#34;&gt;The Easy Patterns&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#character-classes&#34;&gt;Character Classes&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#match-a-directory&#34;&gt;Match a Directory&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#match-directories-recursively&#34;&gt;Match Directories Recursively&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#permutations&#34;&gt;Permutations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#choosing-example-patterns&#34;&gt;Choosing Example Patterns&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#generating-expected-answers&#34;&gt;Generating Expected Answers&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#putting-it-all-together&#34;&gt;Putting It All Together&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#implementations&#34;&gt;Implementations&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;

&lt;h2 id=&#34;different-types-of-glob-patterns&#34;&gt;Different Types of Glob Patterns&lt;/h2&gt;
&lt;p&gt;A glob pattern is a string consisting of Unicode characters and possible wildcard patterns. A wildcard is one of &amp;lsquo;&lt;code&gt;?&lt;/code&gt;&amp;rsquo;, &amp;lsquo;&lt;code&gt;*&lt;/code&gt;&amp;rsquo;, or &amp;lsquo;&lt;code&gt;[&lt;/code&gt;&amp;rsquo;. Also, the backslash (&amp;rsquo;&lt;code&gt;\&lt;/code&gt;&amp;rsquo;) is used to escape each of these characters so they are not interpreted as a wildcard pattern. For example &amp;ldquo;&lt;code&gt;\?&lt;/code&gt;&amp;rdquo; will match a literal question mark instead of &amp;ldquo;any single character except a path separator.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;This leads to these patterns:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Literal strings.&lt;/li&gt;
&lt;li&gt;&amp;lsquo;&lt;code&gt;?&lt;/code&gt;&amp;rsquo; will match any single character except a path separator.&lt;/li&gt;
&lt;li&gt;&amp;lsquo;&lt;code&gt;[&lt;/code&gt;&amp;rsquo; starts defining a character class.&lt;/li&gt;
&lt;li&gt;&amp;lsquo;&lt;code&gt;*&lt;/code&gt;&amp;rsquo; will match multiple characters except a path separator.&lt;/li&gt;
&lt;li&gt;&amp;lsquo;&lt;code&gt;**&lt;/code&gt;&amp;rsquo; will match multiple characters including path separators.&lt;/li&gt;
&lt;li&gt;Escaped wildcards, &amp;ldquo;&lt;code&gt;\?&lt;/code&gt;&amp;rdquo;, &amp;ldquo;&lt;code&gt;\[&lt;/code&gt;&amp;rdquo;, and &amp;ldquo;&lt;code&gt;\*&lt;/code&gt;&amp;rdquo;, which match the literal wildcard characters in a path.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-easy-patterns&#34;&gt;The Easy Patterns&lt;/h2&gt;
&lt;p&gt;Literal strings are the simplest pattern. There are no wildcards at all. They are compared to a path string character-by-character.&lt;/p&gt;
&lt;p&gt;The simplest wildcard is the question mark (&lt;code&gt;?&lt;/code&gt;). As stated above, it matches any single character in the path except a path separator.&lt;/p&gt;
&lt;h2 id=&#34;character-classes&#34;&gt;Character Classes&lt;/h2&gt;
&lt;p&gt;A character class defines a set of characters that can match any single character in a path. The set is delineated by a pair of brackets (&amp;rsquo;&lt;code&gt;[&lt;/code&gt;&amp;rsquo;, and &amp;lsquo;&lt;code&gt;]&lt;/code&gt;&amp;rsquo;). If the first character after the leading &amp;lsquo;&lt;code&gt;[&lt;/code&gt;&amp;rsquo; is not &amp;lsquo;&lt;code&gt;!&lt;/code&gt;&amp;rsquo;, then it matches all characters enclosed in the brackets. Note that the string enclosed by the brackets is not allowed to be empty, so an unescaped &amp;lsquo;&lt;code&gt;]&lt;/code&gt;&amp;rsquo; can be included if it is the first character in the set. That leads to odd looking patterns like, &amp;ldquo;&lt;code&gt;[][!]&lt;/code&gt;&amp;rdquo; which will match &amp;lsquo;&lt;code&gt;[&lt;/code&gt;&amp;rsquo;, &amp;lsquo;&lt;code&gt;]&lt;/code&gt;&amp;rsquo;, or &amp;lsquo;&lt;code&gt;!&lt;/code&gt;&amp;rsquo; in a path.&lt;/p&gt;
&lt;p&gt;The syntax of character classes extends beyond listing a set of characters between the brackets. Two characters separated by a hyphen (&lt;code&gt;-&lt;/code&gt;) defines a range of characters, where the range is based on the value of the characters&amp;rsquo; Unicode code points. For example, &amp;ldquo;&lt;code&gt;[A-Za-z0-9]&lt;/code&gt;&amp;rdquo; defines the set of all ascii alphanumeric characters, and &amp;ldquo;&lt;code&gt;[A-Fa-f0-9]&lt;/code&gt;&amp;rdquo; defines the set of all hexadecimal digits. An explicit hyphen can be included in a character class if it is either the first or last character between the brackets, or if it is escaped (i.e., &lt;code&gt;\-&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Finally, a character class can be negated, or complemented, by placing an exclamation point as the first character between the brackets. In this case, it will match any single character NOT in the class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Note on Path Separators&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://man7.org/linux/man-pages/man7/glob.7.html&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;glob(7) documentation&lt;/a&gt; says that a range (like &amp;ldquo;&lt;code&gt;[.-0]&lt;/code&gt;&amp;rdquo;) containing the &amp;lsquo;&lt;code&gt;/&lt;/code&gt;&amp;rsquo; character is syntactically incorrect. I suppose the reason for that is it&amp;rsquo;s safer to require an explicit path separator than to allow a hidden one in a range.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d like any glob implementation to work on Windows as well. It would be silly to have one syntax for glob patterns on Linux and another on Windows, so &amp;lsquo;&lt;code&gt;/&lt;/code&gt;&amp;rsquo; in patterns will match &amp;lsquo;&lt;code&gt;\&lt;/code&gt;&amp;rsquo; in actual paths on Windows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;match-a-directory&#34;&gt;Match a Directory&lt;/h3&gt;
&lt;h3 id=&#34;match-directories-recursively&#34;&gt;Match Directories Recursively&lt;/h3&gt;
&lt;h2 id=&#34;permutations&#34;&gt;Permutations&lt;/h2&gt;
&lt;h2 id=&#34;choosing-example-patterns&#34;&gt;Choosing Example Patterns&lt;/h2&gt;
&lt;h2 id=&#34;generating-expected-answers&#34;&gt;Generating Expected Answers&lt;/h2&gt;
&lt;h2 id=&#34;putting-it-all-together&#34;&gt;Putting It All Together&lt;/h2&gt;
&lt;h2 id=&#34;implementations&#34;&gt;Implementations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sryze/glob&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sryze/glob&lt;/a&gt; in C++.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>A Quick Note on Python</title>
      <link>http://localhost:1313/2016/01/a-quick-note-on-python.html</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2016/01/a-quick-note-on-python.html</guid>
      <description>&lt;p&gt;I saw an amusing Python tutorial.&lt;/p&gt;
&lt;p&gt;I have been meaning to learn Python for a while now. While searching for other things, I came across an amusingly titled video on YouTube, &lt;a href=&#34;https://www.youtube.com/watch?v=N4mEzFDjqtA&amp;amp;list=PLGLfVvz_LVvSX7fVd4OUFp_ODd86H0ZIY&amp;amp;index=2&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Programming: Learn Python in One Video&lt;/a&gt;, by &lt;a href=&#34;https://www.youtube.com/user/derekbanas&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Derek Banas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I had no illusions it was going to cover the language in any depth. Still, it is only about 45 minutes long, so I decided to take a look. It actually hit a lot of highlights and was a nice overview of the language.&lt;/p&gt;
&lt;p&gt;For example, it introduces the built-in operators and data types. It goes over the &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; loops. It also covers several other programming concepts. If you&amp;rsquo;ve never seen Python before, this video is worth a look.&lt;/p&gt;
&lt;p&gt;I recently picked up a copy of Steven Skiena&amp;rsquo;s &amp;ldquo;Programming Challenges&amp;rdquo; and started going through the problems. To see if I learned anything from the video, I tried coding the first puzzle, the &lt;a href=&#34;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=3&amp;amp;page=show_problem&amp;amp;problem=36&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;3n+1&lt;/code&gt; problem&lt;/a&gt;. The link is to the puzzle on the &lt;a href=&#34;https://uva.onlinejudge.org/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UVa Online Judge&lt;/a&gt;, where one can submit code in C, C++, Java or Pascal. Sadly, they don&amp;rsquo;t support Python. Nevertheless, here&amp;rsquo;s my version in Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Execute: &amp;#34;python p100.py &amp;lt; data&amp;#34; where &amp;#39;data&amp;#39; is the input file, two integers per line.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;cycle_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# n is odd, so multiply by 3 and add 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# n is even, so divide by 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Each line of input consists of two integers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;input_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;input_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# reset the max cycle length for each line of input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;max_cycle_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Make a copy of the original list for output&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;original_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;input_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;input_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cycle_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_cycle_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;max_cycle_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;original_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;original_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_cycle_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I think the only thing here that wasn&amp;rsquo;t covered in the video is reading from stdin.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
