<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>05 on Doug&#39;s Place</title>
    <link>http://localhost:1313/2024/05.html</link>
    <description>Recent content in 05 on Doug&#39;s Place</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015-2025 Douglas Cuthbertson (except where indicated otherwise). The content of this work is licensed under the [Creative Commons Attribution 4.0 (CC BY 4.0), International License](https://creativecommons.org/licenses/by/4.0/), again except where indicated otherwise</copyright>
    <lastBuildDate>Fri, 03 May 2024 04:53:08 -0400</lastBuildDate>
    
        <atom:link href="http://localhost:1313/2024/05/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Templating Journey</title>
      <link>http://localhost:1313/2024/05/a-templating-journey.html</link>
      <pubDate>Fri, 03 May 2024 04:53:08 -0400</pubDate>
      
      <guid>http://localhost:1313/2024/05/a-templating-journey.html</guid>
      <description>&lt;p&gt;It started with a desire to make templates of some &lt;code&gt;cmd&lt;/code&gt; files I wrote to build C software projects. Given the tools I had at hand and the few programming languages I know, Go templates, particularly the &lt;a href=&#34;https://pkg.go.dev/html/template&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTML templates&lt;/a&gt; seemed like a flexible and easy to use solution, and then I fell down a rabbit hole.&lt;/p&gt;
&lt;aside class=&#34;toc&#34;&gt;
  &lt;h2 class=&#34;toc-title&#34;&gt;Contents&lt;/h2&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#background&#34;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Several years back, I started following &lt;a href=&#34;https://handmadehero.org/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Handmade Hero&lt;/a&gt; by Casey Muratori. Within the first few episodes, Muratori was advocating for keeping software development as simple as possible and knowing your tools. He eschewed build systems and third-party libraries (even the standard library to the greatest degree possible). He built a build system with simple &lt;code&gt;.cmd&lt;/code&gt; files (or maybe they were &lt;code&gt;.bat&lt;/code&gt; files, but that doesn&amp;rsquo;t matter much) that ran some version of Microsoft&amp;rsquo;s Visual Studio compiler with just the command-line options needed.&lt;/p&gt;
&lt;p&gt;I liked the idea a lot, so I built on his scripts and created a set of my own that gave me build options for debug and release, that cleaned out build artifacts, built unit tests separately, and built separate components so I could refactor large components into smaller ones or add new components and have some confidence they would build and run on their own.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
